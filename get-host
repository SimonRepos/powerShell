1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
	
#Requires -Version 3.0
function Get-MrVmHost {
 
<#
.SYNOPSIS
    Determines the HyperV host virtualization server for the specified virtual machines.
 
.DESCRIPTION
    Get-MrVmHost is an advanced function for determining the HyperV host virtualiztion server for one
    or more VMs (virtual machines).
 
.PARAMETER ComputerName
    The name of the VM (virtual machine) to determine the HyperV host for.
 
.PARAMETER Credential
    Specifies a user account that has permission to perform this action. The default is the current user.
 
    Type a user name, such as User01 or Domain01\User01. Or, enter a PSCredential object, such as one generated by the
    Get-Credential cmdlet. If you type a user name, this cmdlet prompts you for a password.
 
.EXAMPLE
     Get-MrVmHost -ComputerName Server01, Server02, Server03
 
.EXAMPLE
     Get-MrVmHost -ComputerName Server01, Server02, Server03 -Credential (Get-Credential)
 
.INPUTS
    None
 
.OUTPUTS
    PSCustomObject
 
.NOTES
    Author:  Mike F Robbins
    Website: http://mikefrobbins.com
    Twitter: @mikefrobbins
#>
 
    [CmdletBinding()]
    param (
        [Parameter(Mandatory)]
        [Alias('VMName')]       
        [string[]]$ComputerName,
 
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty
    )
 
    $Params = @{
        ComputerName = $ComputerName
        ScriptBlock = {Get-ItemProperty -Path 'HKLM:\SOFTWARE\Microsoft\Virtual Machine\Guest\Parameters'}
        ErrorAction = 'SilentlyContinue'
        ErrorVariable = 'Problem'
    }
 
    if ($PSBoundParameters.Credential) {
        $Params.Credential = $Credential
    }
 
    Invoke-Command @Params |
    Select-Object -Property VirtualMachineName, HostName
 
    foreach ($p in $Problem) {
        if ($p.origininfo.pscomputername) {
            Write-Warning -Message "Unable to read registry key on $($p.origininfo.pscomputername)" 
        }
        elseif ($p.targetobject) {
            Write-Warning -Message "Unable to connect to $($p.targetobject)"
        }
    }
 
}
